{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The OfficiumDivinum Project There are many excellent projects to make computers speak liturgically. The gregorio project makes producing beautiful chant scores easy (and TeX and LaTeX make producing beautiful documents easy); divinumoficium makes the divine office (from the pre-tridentine monastic books through to the final reforms before it was replaced with the Liturgia Horarum ) and the Mass in the ancient Roman rite available in many languages to anyone with an internet connection; gregobase from the gregorio project contains almost the entirety of all the major chantbooks; and Benjamin Bloomfield\u2019s psalm tone tool (or pslm ) can point psalms for chanting. The only problem with these and many other excellent projects is that they are generally written for programmers, by programmers, or as standalone applications for a specific purpose. Divinumofficium has errors in it, but correcting them requires understanding its (rather elegant) adhoc database structure, and not being intimidated by the words like \u2018pull request\u2019. 1 Gregobase has everything, but it is not possible to search or retrieve scores programmatically. 2 Bloomfield\u2019s work is excellent, but if you\u2019re making a booklet you still have to put everything together by hand. OfficiumDivinum aims to be the missing glue to hold everything together. Lots of people are very knowledgeable about Liturgy, but can\u2019t write code. Lots of people are very good at writing modern web apps, but not so at home with the interactions of TeX, fonts and a music typography layer built on top of TeX (not to mention whole websites written in perl, like divinumofficium). Lots of other people are very good at writing web APIs and standalone code, but not so good at writing frontend stuff like web apps. On the other hand Everyone can use a point-and-click WYSIWYG app Thus we offer: A complete re-write of the logic from divinumofficium as a fully documented OpenAPI compliant backend api ( WIP ) An example web app for the divine office written in Vue.js, which will ultimately have WYSIWYG editing. ( TODO ) A set of parsers for divinumofficium\u2019s source files, which drop out nice python objects you can use directly in your own code. Documentation for the divinumofficium database structure, which is hopefully easier to read than the perl. ( TODO ) A booklet generator integrated with the office, to make singing any office together easy . ( WIP ) Tools for standardising gregorian scores, so that booklets display in a standardised fashion. ( TODO ) Testsuites and documentation for everything. The divinumofficium team are extremely quick to merge pull requests, however! \u21a9 We are working on a PR to fix this at the moment. \u21a9","title":"The OfficiumDivinum Project"},{"location":"#the-officiumdivinum-project","text":"There are many excellent projects to make computers speak liturgically. The gregorio project makes producing beautiful chant scores easy (and TeX and LaTeX make producing beautiful documents easy); divinumoficium makes the divine office (from the pre-tridentine monastic books through to the final reforms before it was replaced with the Liturgia Horarum ) and the Mass in the ancient Roman rite available in many languages to anyone with an internet connection; gregobase from the gregorio project contains almost the entirety of all the major chantbooks; and Benjamin Bloomfield\u2019s psalm tone tool (or pslm ) can point psalms for chanting. The only problem with these and many other excellent projects is that they are generally written for programmers, by programmers, or as standalone applications for a specific purpose. Divinumofficium has errors in it, but correcting them requires understanding its (rather elegant) adhoc database structure, and not being intimidated by the words like \u2018pull request\u2019. 1 Gregobase has everything, but it is not possible to search or retrieve scores programmatically. 2 Bloomfield\u2019s work is excellent, but if you\u2019re making a booklet you still have to put everything together by hand. OfficiumDivinum aims to be the missing glue to hold everything together. Lots of people are very knowledgeable about Liturgy, but can\u2019t write code. Lots of people are very good at writing modern web apps, but not so at home with the interactions of TeX, fonts and a music typography layer built on top of TeX (not to mention whole websites written in perl, like divinumofficium). Lots of other people are very good at writing web APIs and standalone code, but not so good at writing frontend stuff like web apps. On the other hand Everyone can use a point-and-click WYSIWYG app Thus we offer: A complete re-write of the logic from divinumofficium as a fully documented OpenAPI compliant backend api ( WIP ) An example web app for the divine office written in Vue.js, which will ultimately have WYSIWYG editing. ( TODO ) A set of parsers for divinumofficium\u2019s source files, which drop out nice python objects you can use directly in your own code. Documentation for the divinumofficium database structure, which is hopefully easier to read than the perl. ( TODO ) A booklet generator integrated with the office, to make singing any office together easy . ( WIP ) Tools for standardising gregorian scores, so that booklets display in a standardised fashion. ( TODO ) Testsuites and documentation for everything. The divinumofficium team are extremely quick to merge pull requests, however! \u21a9 We are working on a PR to fix this at the moment. \u21a9","title":"The OfficiumDivinum Project"},{"location":"acknowledgements/","text":"Acknowledgements The OfficiumDivinum project was started by Endre Kormos @kormose and John Morris @2e0byo . Liturgical divinumofficium gregorio Programtical FastAPI Contributors Not listed? If you have submitted a PR and haven\u2019t been added to this list, open an issue or PR.","title":"Acknowledgements"},{"location":"acknowledgements/#acknowledgements","text":"The OfficiumDivinum project was started by Endre Kormos @kormose and John Morris @2e0byo .","title":"Acknowledgements"},{"location":"acknowledgements/#liturgical","text":"divinumofficium gregorio","title":"Liturgical"},{"location":"acknowledgements/#programtical","text":"FastAPI","title":"Programtical"},{"location":"acknowledgements/#contributors","text":"Not listed? If you have submitted a PR and haven\u2019t been added to this list, open an issue or PR.","title":"Contributors"},{"location":"contributing/","text":"Contributing To contribute to one of our repositories, open a pull request. More information is likely available in the documentation of the repository itself. To edit this website, use the src branch .","title":"Contributing"},{"location":"contributing/#contributing","text":"To contribute to one of our repositories, open a pull request. More information is likely available in the documentation of the repository itself. To edit this website, use the src branch .","title":"Contributing"},{"location":"philosophy/","text":"Philosophy Note By philosophy we mean \u2018how we set about doing things\u2019, i.e. policy . Rationale The Liturgy of the Catholic Church is eternal. 1 The form of that liturgy here below changes but slowly (except when something pretty much brand new is substituted for it). The internet is very young, and everything on it is already old. Thus divinumofficium, which is an incredible resource, is written in a declining language (perl), using a home-made database format, in a time before \u2018paradigms\u2019 were really so important, turning out hand-formatted unstructured html. Anything we write will look this way in fifteen years time: perhaps less, because Laszlo Kiss was an incredible programmer. Summary The websites of an Eternal Church should be old and every young, capable of serving up from their databases treasures nova et vetera , whatever the internet may look like in the future. In Practice If it's not documented, it's not finished. Documentation should be readable by a tinkerer in the language in question, and thorough enough to enable complete reimplementation in the future. Build modular tools with well defined interfaces. The easier tinkering is, the easier it will be gradually to replace infrastructure. Test everything which can be tested. Tested code is less brittle code. And people might get involved in less brittle code. Automate as much as possible. Anything which can be run on an automation server should, so contributors only have to supply new code, and everything else will drop into place. Plan for obselescence. Code should die gracefully; and new code should take its place. Document your design decisions, not just your implementation. Including these! Explaining why a particular approach was taken is almost as important as explaining how it works. Perhaps more so, as anyone can read the code to figure out how it works. For the form taken by the sacrificium laudis here below, bound up as it is with the Sacrifice of Calvary, is temporal, but as George Macdonad put it, on Calvary the Son \u2018did that, in the wild weather of his outlying provinces, which he had done at home in glory and gladness,\u2019 and thus liturgy itself points to something eternal. \u21a9","title":"Philosophy"},{"location":"philosophy/#philosophy","text":"Note By philosophy we mean \u2018how we set about doing things\u2019, i.e. policy .","title":"Philosophy"},{"location":"philosophy/#rationale","text":"The Liturgy of the Catholic Church is eternal. 1 The form of that liturgy here below changes but slowly (except when something pretty much brand new is substituted for it). The internet is very young, and everything on it is already old. Thus divinumofficium, which is an incredible resource, is written in a declining language (perl), using a home-made database format, in a time before \u2018paradigms\u2019 were really so important, turning out hand-formatted unstructured html. Anything we write will look this way in fifteen years time: perhaps less, because Laszlo Kiss was an incredible programmer. Summary The websites of an Eternal Church should be old and every young, capable of serving up from their databases treasures nova et vetera , whatever the internet may look like in the future.","title":"Rationale"},{"location":"philosophy/#in-practice","text":"If it's not documented, it's not finished. Documentation should be readable by a tinkerer in the language in question, and thorough enough to enable complete reimplementation in the future. Build modular tools with well defined interfaces. The easier tinkering is, the easier it will be gradually to replace infrastructure. Test everything which can be tested. Tested code is less brittle code. And people might get involved in less brittle code. Automate as much as possible. Anything which can be run on an automation server should, so contributors only have to supply new code, and everything else will drop into place. Plan for obselescence. Code should die gracefully; and new code should take its place. Document your design decisions, not just your implementation. Including these! Explaining why a particular approach was taken is almost as important as explaining how it works. Perhaps more so, as anyone can read the code to figure out how it works. For the form taken by the sacrificium laudis here below, bound up as it is with the Sacrifice of Calvary, is temporal, but as George Macdonad put it, on Calvary the Son \u2018did that, in the wild weather of his outlying provinces, which he had done at home in glory and gladness,\u2019 and thus liturgy itself points to something eternal. \u21a9","title":"In Practice"},{"location":"tools/","text":"Tools OfficiumDivinum A rewrite of divinumofficium from the ground up, using modern","title":"Tools"},{"location":"tools/#tools","text":"OfficiumDivinum A rewrite of divinumofficium from the ground up, using modern","title":"Tools"}]}